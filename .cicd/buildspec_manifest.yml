
version: 0.2
env:
  shell: /bin/bash
  variables:
    USE_EPOCH: 0
    PUBLIC_REGISTRY: public.ecr.aws/i9v7p2w3
    DOCKER_CLI_EXPERIMENTAL: enabled

batch:
  fast-fail: false
  build-graph:
    - identifier: amd64_py37
      env:
        compute-type: BUILD_GENERAL1_LARGE
        privileged-mode: true
        variables:
          VERSION: 3.7
          ARCH: amd64
      buildspec: .cicd/buildspec_image.yml

    - identifier: arm64v8_py37
      env:
        type: ARM_CONTAINER
        image: aws/codebuild/amazonlinux2-aarch64-standard:2.0
        compute-type: BUILD_GENERAL1_LARGE
        privileged-mode: true
        variables:
          ARCH: arm64v8
          VERSION: 3.7
      buildspec: .cicd/buildspec_image.yml

    - identifier: amd64_py38
      env:
        compute-type: BUILD_GENERAL1_LARGE
        privileged-mode: true
        variables:
          VERSION: 3.8
          ARCH: amd64
      buildspec: .cicd/buildspec_image.yml

    - identifier: arm64v8_py38
      env:
        type: ARM_CONTAINER
        image: aws/codebuild/amazonlinux2-aarch64-standard:2.0
        compute-type: BUILD_GENERAL1_LARGE
        privileged-mode: true
        variables:
          ARCH: arm64v8
          VERSION: 3.8
      buildspec: .cicd/buildspec_image.yml

    - identifier: manifest
      env:
        compute-type: BUILD_GENERAL1_LARGE
        privileged-mode: true
      depend-on:
        - amd64_py37
        - arm64v8_py37
        - amd64_py38
        - arm64v8_py38

phases:
  install:
    commands:
      - if [ -z ${AWS_ACCOUNT_ID+x} ]; then AWS_ACCOUNT_ID=$(aws sts get-caller-identity | jq -r .Account); fi
      - REGISTRY_URI=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION:-$AWS_DEFAULT_REGION}.amazonaws.com/
      - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${REGISTRY_URI}
      - aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${PUBLIC_REGISTRY}
      - if ! [ -z ${CODEBUILD_RESOLVED_SOURCE_VERSION+x} ]; then COMMIT_HASH=${CODEBUILD_RESOLVED_SOURCE_VERSION::7}; fi
      - EPOCH=`date +'%Y%m%d'`
      - SUFFIX=${COMMIT_HASH:=$EPOCH}
      - if [ $USE_EPOCH -eq 1 ]; then SUFFIX=$EPOCH; fi
      - |
          if ! [ -z "${CODEBUILD_WEBHOOK_TRIGGER+x}" ]; then
            PRE=`echo $CODEBUILD_WEBHOOK_TRIGGER|cut -d '/' -f 1`;
            if [ $PRE == "tag" ]; then SUFFIX=`cut -d '/' -f 2`; fi
          fi
  build:
    commands:
      - |
          for VERSION in 3.7 3.8; do
            for ARCH in "amd64" "arm64v8"; do
              TAG=${VERSION}.${SUFFIX}-${ARCH}

              echo Publish from ${REGISTRY_URI}python:${TAG}$ to ${PUBLIC_REGISTRY}/python:${TAG}$
              docker pull ${REGISTRY_URI}python:${TAG}
              docker tag  ${REGISTRY_URI}python:${TAG} ${PUBLIC_REGISTRY}/python:${TAG}
              docker push ${PUBLIC_REGISTRY}/python:${TAG}
            done

            docker manifest create ${PUBLIC_REGISTRY}/python:${VERSION}.${SUFFIX}       \
              --amend ${PUBLIC_REGISTRY}/python:${VERSION}.${SUFFIX}-amd64              \
              --amend ${PUBLIC_REGISTRY}/python:${VERSION}.${SUFFIX}-arm64v8
            docker manifest push ${PUBLIC_REGISTRY}/python:${VERSION}.${SUFFIX}

            docker manifest create ${PUBLIC_REGISTRY}/python:${VERSION}                 \
              --amend ${PUBLIC_REGISTRY}/python:${VERSION}.${SUFFIX}-amd64              \
              --amend ${PUBLIC_REGISTRY}/python:${VERSION}.${SUFFIX}-arm64v8
            docker manifest push ${PUBLIC_REGISTRY}/python:${VERSION}

          done
    finally:
      - rm -rfv ~/.docker
