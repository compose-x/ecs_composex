ecs_composex.sqs
================

This module aims to create the SQS Queues and expose there properties via AWS CFN
exports so that they can be used and referenced to/by services.


Declaration of queues in ComposeX
---------------------------------

The SQS queues are referenced with the key *x-sqs* in the compose file.

.. code-block:: yaml

    services:
      app01
      
    # .. etc.
    x-sqs:
     Queue01:
       Properties: {}
       Services: []
       Settings: {}
       

Queue properties
----------------

In order to make things very simple, the definition of properties follows the
exact pattern as for the `CFN SQS definition`_.
There was no reason to re-invent the wheel and therefore right up a massive amount of documentation.

Redrive policy
^^^^^^^^^^^^^^

The redrive policy works exactly as you would expect it and is defined in the exact same way as for within
the SQS proprties. Only, here, you only need to put the queue name of the DLQ. The generated ARN etc. will be
fetched via exports (which also implicitly adds a lock on it).

Example with DLQ:

.. code-block:: yaml

    x-sqs:
      DLQ:
        Properties: {}
        Settings: {}
        Services: []
    # This DLQ is not consumed by any service at this point and requires no specific settings or properties.
    # Name will be generated by CFN
    
    AppQueue:
      Properties:
        RedrivePolicy:
          deadLetterTargetArn: DLQ
          maxReceiveCount: 10
      Settings:
        EnvNames:
          - APPQUEUE01


Queue settings
--------------

The settings are extra info for you to add to the definition of the queue or for ECS ComposeX to have more info about what to do with it.

Supported attributes:

* `EnvNames`_

EnvNames
^^^^^^^^

This is a list of names that you would want to use for the SQS Queue exposed to the microservice.
By default, it will always expose the name of the queue as written in the composex file.

Why bother would you ask? Well, because I have seen dev teams with shared resources, team A uses QUEUE01 for it,
team B uses Queue01, etc. So that way, if you needed to merge people who can't agree on a way to name things,
you are good to go.


.. note:: 

  For now it is a list of strings, might allow to expand to a list of key value where the key would be the name
  of the environment variable and the value would be the attribute of the queue to expose for that queue.



.. note::

    This is voluntarily not using the *configs* keyword not to confuse with Docker Compose *configs*


Services
^^^^^^^^

This is where the value of using this tool comes in play: you can list the services you want to provide access to the queue to,
by listing these.

The list is a list with dict:

* name: the name of the service you want to provide access to
* access: the type of access you want to provide (future, you will be able to define the list of actions in here directly)


The available defined access policies are :

* RWMessages
* RWPermissions
* RO

These need tuning and perfecting, NotAction might not be the best approach. TBD.


.. _CFN SQS definition: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sqs-queues.html
