version: "3.8"
services:
  nginx:
    image: nginx
    container_name: nginx-${SITE_NAME}
    build:
      context: ./docker/nginx/
    ports:
      - 8081:80 # Modified that so you could run angular locally along with your NGINX + PHP
    links:
      - phpfpm
    volumes:
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./logs/nginx:/var/log/nginx
    deploy:
      labels:
        ecs.task.family: phpapp # Allows to indicate we want NGINX and PHP-FPM to be part of the same task definition
      resources: # Fine CPU / RAM tuning for nginx. Requires some CPU but not as much of RAM compared to PHP FPM
        reservations:
          memory: 128M
        limits:
          memory: 0.25G
          cpus: 0.5
    x-network:

  phpfpm:
    image: php-fpm
    container_name: phpfpm-${SITE_NAME}
    build:
      context: .
      dockerfile: ./docker/phpfpm/Dockerfile
    ports:
      - 9000:9000
    links:
      - mysql
    volumes:
      - .:/var/www/html:cached
      - ./docker/phpfpm/phpfpm.conf:/usr/local/etc/php-fpm.d/www.conf
      - ./logs/phpfpm:/var/log
    environment:
      - DATABASE_URL=mysql://${DB_USER}:${DB_PASS}@{DB_HOST:-mysql}:${DB_PORT:-3306}/${DB_NAME} # Setting default if env vars not set.
    deploy:
      labels:
        ecs.task.family: phpapp # Allows to indicate we want NGINX and PHP-FPM to be part of the same task definition
      resources: # Just some fine tuning for CPU RAM for PHP FPM. Saving more RAM for it than for NGINX
        reservations:
          memory: 512M
        limits:
          memory: 0.75G
          cpus: 0.5

# DNS and Ingress settings
# Here we assume you already have a route53 domain, so *Lookup* will identify it.

x-dns:
  PrivateNamespace:
    Name: privatedomain.lan
  PublicZone:
    Name: your.domain.net
    Lookup: True
  Records:
    - Properties:
        Name: wordpress.demos.bdd-testing.compose-x.io
        Type: A
      Target: x-elbv2::app-alb

#Create an ACM Certificate for my domain

x-acm:
  site-01:
    MacroParameters:
      DomainNames:
        - ${SITE_NAME}.mydomain.net

# An ALB for balanced ingress

x-elbv2:
  app-alb:
    Properties:
      Scheme: internet-facing
      Type: application
    MacroParameters:
      Ingress:
        ExtSources:
          - IPv4: 0.0.0.0/0
            Name: ANY
            Description: "Ingress from ANY"
    Listeners:
      - Port: 80
        Protocol: HTTP
        DefaultActions:
          - Redirect: HTTP_TO_HTTPS # Given we are creating a certificate, we redirect all HTTP to HTTPs
      - Port: 443
        Protocol: HTTPS
        Certificates:
          - x-acm: site-01
        Targets:
          - name: phpapp:nginx # We indicate that all traffic should be sent to our NGINX container.
            access: / # This captures all incoming queries.

    Services:
      - name: phpapp:nginx # For our NGINX container in the service tasks
        port: 80 # Port NGINX will be listening on
        protocol: HTTP # Protocol
        healthcheck: 80:HTTP:7:2:15:5:/:200 # Healcheck on port 80, protocol HTTP, requires 7 validation, fails on 2, checks every 15 seconds with a timeout of 5s, checks path /, and expects HTTP code 200 to be OKAY

# Database using RDS Aurora MySQL.
# You can go small with very little settings, or set all the Properties yourself for more control.

x-rds:
  app-db:
    MacroParameters:
      Engine: aurora-mysql
      EnginveVersion: 5.7
    Services:
      - name: phpfpm
        access: RW
        SecretsMappings: # These allow us to map the key in secrets manager to a specific env var for the container.
          Mappings:
            host: DB_HOST
            port: DB_PORT
            username: DB_USER
            password: DB_PASS
            dbname: DB_NAME
